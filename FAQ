antiparser FAQ 1.0:

1. What is antiparser?

A API for generating random bad input to when fuzzing network protocols and
file formats.

2. The first release was antiparser-2.0. Why is there no antiparser-1.0?

antiparser-1.0 was an implementation I wrote based on the ill-conceived idea
that people should be able to specify network protocols and file formats
in an XML-based markup language called APML (AntiParser Markup Language).
This implementation had many bugs related to XML parsing, and created many
dependencies that ultimately limited the flexibility of the antiparser.  The
implementation require that an XML file was created, it then marshalled all
of the XML data into Python objects and then the antiparser itself performed
many of the same operations it does now on these objects.  The markup language
I create had a million attributes for each data object and was very unwieldy.
It offered no real advantage since you needed to script the fuzzer in Python
anyhow.  Long story short, I rewrote it all as an API and the result in version 2.0.

3. Why use antiparser? 

antiparser is intended to be a flexible, well-documented fuzzing framework.
In the current incarnation, it is hard to estimate whether or not it provides
significant advantages over writing custom fuzzers per protocol and file
format.  The long term goal is to create a tool that makes it easy to model
any protocol or format.  As it is an API, it could be integrated or used in
combination with other tools.

4. Has antiparser found any real world vulnerabilities?

As of antiparser-2.0, the antiparser has not been thoroughly tested.

If you find any vulns, send me an email and I will update this section of
the FAQ with the details.

