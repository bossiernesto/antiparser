The general approach to using the antiparser is to model a network protocol
or file format using the various methods of specifying data that are 
provided by the antiparser.  You'll then add some logic to send however
many packets or create however many files.  If the case of a listening
server, run the script and attach a debugger.
 
Here are some examples of using the antiparser:

$ python
Python 2.3.5 (#1, Mar 20 2005, 20:38:20) 
[GCC 3.3 20030304 (Apple Computer, Inc. build 1809)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
# import the antiparser
>>> from antiparser import *

# create an instance#
>>> ap = antiparser()

# set debug mode on the antiparser
>>> ap.setDebug(True)

# instantiate apString
>>> newstring = apString()

# append apString to the antiparser
>>> ap.append(newstring)
++ Adding <antiparser.apString instance at 0x77da0> to <antiparser.antiparser 
instance at 0x71a30> ++
++ Extracting new payload from [<antiparser.apString instance at 0x77da0>] ++

# create a random permutation of each object in the antiparser
>>> ap.permute()
++ Permuting <antiparser.apString instance at 0x77da0> in random mode ++
++ Extracting new payload from [<antiparser.apString instance at 0x77da0>] ++

# display contents of the antiparser
>>> ap.display()
Data Object: <antiparser.apString instance at 0x77da0>
[('content', 'Sa\x15\xaaZax\x19\xef\xe0\x1c\xea\x83\x9f\x8c(\x1bo\x02O\x88`\x03\
x0b\xf7\xaf\x85\xa5\x8b\xfd:\xc6\xb0~\xe4\xb0\xa5\xe6\x1d8\xa6\xa7v@\xd1dL2v\x17
\n\xe5\x1d\r\x81z]R`\x98>rJ\xcd]\xbbEV\x014\x1eO\xd3\x02y\xba\xf92\x97\x1f\x03+\
xe7\xa8I\xe2\x8d\xd3R\xce\xe2\x87\x93\x01\x14\xb3j\x07\xf8Bu\xa3}\xb8\xe2B\xdc\x
b4Cf\x8b\xa9\x17\xa4\xc84e\x9df\x8a\xe2Tc2\x81|d\x000:\x93#\xfef\xdd\x08\xceK\xe
8\x95a\x119\x1a\xa5\xd4\xa0s\xc3r\xff\xf1\x1e\x17\xb5\x0f\xd2iO\xf1Ms\xf4S\x80p\
x01\x9d\xad\x0f\xa8\xfb\xe7|\xf1\x84\x89\x10\xa4\xb2"\x10"\xc3-{\rL\xbahd-\x807\
x8a< \x0f\xb5\x13\x17\x1f\xf0 \xc3[\xa0\x00\xe9\xbe\xb7\x16\x97/#\x15\x04pF\x82\
rn\xcf\x9a\xf6\x9c\x04J8\xfbH}\xc0\x01\xa0\xb9=\x10\x1a\xc1(l\xa1\x98b\xa4xj~,j\
xac$2\xd8o$=CH\xce\xe9\x8aV\xafH\x80\x8a@\xcdxW\x024\x87#?\x99,-\xeePLH\x1a\xba\
xf7U|\xd9\xb2<7\x8f\xf3\xbdm\x08\xbb\xebc\xcb|\xa2\xc5y\xb5\xbb,F\x86\xdb\x8f)\x
b7H\xe3\x98\x1c\xd5\x1e+N\xf3\x9b\xf9\x04\xd9\x9d\xccb{\xc4x\xf8\xc8\x1b@}k%\x0f
\x9dKa&V\xf0\x07\xfaR\x1f\xe2~\xfb_\xf5\x17\x88\x18\xa4i\xca\xf8\x18cG5\xbcv\xc4
$\xc34\xc1\x16\xe2\xd2\x07\x86\xa8\xc4\xbd\x191\xbf\x9aX6\x90\x08\xddj1\x19=S\xd
e:X\xad\xf54\xc9i\x9b,\x9e\x7f\xbb\x05\xcb\x15\x8e\x0f\x99\x8a\xa8t#\x7fD\xe1{\x
12\x1d\xb0\xe9\xd4\x80NA\x02._v\x877\xa4\xc6NE\xf5\x92\xf0,\xb0\xa3g\xb5\x17\x85
T\x1f\xc41\xea\x95\xf9\xa1M\xba\x87L\x15\x9a*\x9d=\x9f\xf2\x10\xccA\xa9\xfc\x0c\
x90\xe0tO\x8b+\xcc\xa2\xb7HQ,d\x1c#{_\x99\xea\xb8!\x8c\xe2\xf0\x17\x0eN\xf8\xe2#
\x90\x8a_S\x01@\xf0\xd8\x12?\xac\x88k\xe4Al\x95\xec\x88\xac\xb6A\xfc\x89\x04uR\x
17Q\xf2M\xab\xdeh\xa4Z\x9e\x8cE\xac\xeavt5\xed\xf5d\x04\x90\x0c.\xd2f\xc9M\x1b\x
f8\x1bn\x93\x8a\xe9\xf0\xefM\x81\xcc\x84\xe2w\x87\x0e\x12\x11\x1a\x91\xa6\x8f"dD
\xfaz\xd3l\xda{Y\x96|\xbb\x8f\x0252\xa4L'), ('terminator', None), ('charRange', 
['\x00', '\x01', '\x02', '\x03', '\x04', '\x05', '\x06', '\x07', '\x08', '\t', '
\n', '\x0b', '\x0c', '\r', '\x0e', '\x0f', '\x10', '\x11', '\x12', '\x13', '\x14
', '\x15', '\x16', '\x17', '\x18', '\x19', '\x1a', '\x1b', '\x1c', '\x1d', '\x1e
', '\x1f', ' ', '!', '"', '#', '$', '%', '&', "'", '(', ')', '*', '+', ',', '-',
 '.', '/', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', ':', ';', '<', '=',
 '>', '?', '@', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',
 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '[', '\\', ']'
, '^', '_', '`', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm'
, 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '{', '|', '}'
, '~', '\x7f', '\x80', '\x81', '\x82', '\x83', '\x84', '\x85', '\x86', '\x87', '
\x88', '\x89', '\x8a', '\x8b', '\x8c', '\x8d', '\x8e', '\x8f', '\x90', '\x91', '
\x92', '\x93', '\x94', '\x95', '\x96', '\x97', '\x98', '\x99', '\x9a', '\x9b', '
\x9c', '\x9d', '\x9e', '\x9f', '\xa0', '\xa1', '\xa2', '\xa3', '\xa4', '\xa5', '
\xa6', '\xa7', '\xa8', '\xa9', '\xaa', '\xab', '\xac', '\xad', '\xae', '\xaf', '
\xb0', '\xb1', '\xb2', '\xb3', '\xb4', '\xb5', '\xb6', '\xb7', '\xb8', '\xb9', '
\xba', '\xbb', '\xbc', '\xbd', '\xbe', '\xbf', '\xc0', '\xc1', '\xc2', '\xc3', '
\xc4', '\xc5', '\xc6', '\xc7', '\xc8', '\xc9', '\xca', '\xcb', '\xcc', '\xcd', '
\xce', '\xcf', '\xd0', '\xd1', '\xd2', '\xd3', '\xd4', '\xd5', '\xd6', '\xd7', '
\xd8', '\xd9', '\xda', '\xdb', '\xdc', '\xdd', '\xde', '\xdf', '\xe0', '\xe1', '
\xe2', '\xe3', '\xe4', '\xe5', '\xe6', '\xe7', '\xe8', '\xe9', '\xea', '\xeb', '
\xec', '\xed', '\xee', '\xef', '\xf0', '\xf1', '\xf2', '\xf3', '\xf4', '\xf5', '
\xf6', '\xf7', '\xf8', '\xf9', '\xfa', '\xfb', '\xfc', '\xfd', '\xfe', '\xff']),
 ('minsize', 1), ('illegalchars', ''), ('maxsize', 1024), ('static', False), ('m
ode', 'random'), ('debug', False), ('optional', False), ('byteorder', None)]

# set global debug - sets debug on all objects in antiparser
>>> ap.setGlobalDebug(True) 

# set the incremental mode on newstring
>>> newstring.setMode("incremental") 
++ Setting mode for <antiparser.apString instance at 0x77da0> to: incremental
